<?

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Post extends BasePost {
    public function isOld() {
        return time() - strtotime($this['created_at']) > sfConfig::get('app_post_delete_period', 1) * 3600 * 24;
    }

    /**
     * Возвращает распаршенный текст поста
     *
     * @return string текст поста, пригодный для показа пользователю
     */
    public function getTextParsed() {
      if($this->getText() === null)
      {
        sfContext::getInstance()->getConfiguration()->loadHelpers(array('Parse','Text','Tag'));
        $this->setText(parsetext($this->getTextOriginal()));
        $this->save();
      }
      return $this->getText();
    }
    
    public function getBlogCode() {
        sfApplicationConfiguration::getActive()->loadHelpers(array('Tag', 'I18N'));
        if(!$this->getText() && $this->Attributes->count()) {
            $pic = $this->Attributes[0];
            return "<a href='".url_for('post/show?id='.$this->getId(), 'absolute=true')."'>".image_tag($pic->getValue(), array('absolute'=>true))."</a>";
        } else {
            return "<a href='".url_for('post/show?id='.$this->getId(), 'absolute=true')."'>".__('ссылка на пост')."</a>";
        }
    }
    
    public function getForumCode() {
        sfApplicationConfiguration::getActive()->loadHelpers(array('Url', 'I18N'));
        if(!$this->getText() && $this->Attributes->count()) {
            $pic = $this->Attributes[0];
            $root = substr(url_for('@homepage', array('absolute'=>true)), 0, -1);
            return "[url=".url_for('post/show?id='.$this->getId(), 'absolute=true')."][img]".$root.$pic->getValue()."[/img][/url]";
        } else {
            return "[url=".url_for('post/show?id='.$this->getId(), 'absolute=true')."]".__('ссылка на пост')."[/url]";
        }
    }

    public function getThumbnail() {
        $attr = $this->getAttributes();
        if(count($attr)) {
            $info = pathinfo($attr[0]->getValue());
            return $info['dirname']."/".$info['filename']."_thumbnail.jpg";
        } else {
            return '';
        }
    }

    public function getSeoTitle() {
        if($this->getHeader())
            return $this->getHeader();
        $attr = $this->getAttributes();
        if(count($attr) && $attr[0]->getComment()) {
            return trimword($attr[0]->getComment(), sfConfig::get('app_post_title_length'));
        } else {
            return '';
        }
    }

    public function getSeoShortTitle() {
        if($this->getHeader())
            return $this->getHeader();
        $attr = $this->getAttributes();
        if(count($attr) && $attr[0]->getComment()) {
            return trimword($attr[0]->getComment(), sfConfig::get('app_post_short_title_length'));
        } else {
            return '';
        }
    }

    public function getSeoDescription() {
        if($this->getHeader())
            return $this->getHeader();
        $attr = $this->getAttributes();
        if(count($attr) && $attr[0]->getComment()) {
            return trimword($attr[0]->getComment(), sfConfig::get('app_post_description_length'));
        } else {
            return '';
        }
    }

    public function postInsert($event) {
        sfApplicationConfiguration::getActive()->loadHelpers('Partial');
        try {
            if($this->getUser()->getProfile()->getUsecrossposting()) {
                func::crossposting($this->getUser()->getProfile()->getLjlogin(),
                    $this->getUser()->getProfile()->getLjpassword(),
                    get_partial('post/post_lj', array('post' => $this)), $this->getMoodNameI18N(), $this->getMoodSmile());
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }

    public function preDelete($event) {
        if($this->getRating() > 0) {
          $this->User->getProfile()->setRating($this->User->getProfile()->getRating() - $this->getRating());
          $this->User->save();
        }
    }

    public function deleteBlogs() {
        Doctrine_Query::create()
            ->delete("BlogPost bp")
            ->where("bp.post_id = ?", $this["id"])
            ->execute();
    }

    public function getTagline() {
        $res = '';
        foreach($this->Blogs as $blog) {
            $res .= $blog->getTag().",";
        }
        return substr($res, 0, -1);
    }

    /**
     * Возвращает стоку с тэгами и их синонимами через запятую
     *
     * @return string тэглайн
     */
    public function getFullTagline(){
        $res = '';
        foreach($this->Blogs as $blog) {
            $res .= $blog->getName().",";
            if($blog->getSynonyms())
            {
              $res .= $blog->getSynonyms().",";
            }
        }
        return substr($res, 0, -1);
    }

    public function getTagNames() {
        $res = '';
        foreach($this->Blogs as $blog) {
          $res .= $blog->getName() ? $blog->getName() : $blog->getTag();
          if($blog->getSynonyms())
            $res .= '(' . $blog->getSynonyms() . ')';
          $res .= ' ';
        }
        if(!$res && !$this->getText() && $this->Attributes->count())
          $res = 'Прикольные картинки ';
        return substr($res, 0, -1);
    }

    public function getMoodNameI18N() {
	sfApplicationConfiguration::getActive()->loadHelpers('I18N');
        switch($this->getMood()) {
            case -1:
                return __('Плохое');
            case 1:
                return __('Отличное');
            default:
                return __('Нормальное');
        }
    }

    public function getMoodName() {
        switch($this->getMood()) {
            case -1:
                return 'bad';
            case 1:
                return 'good';
            default:
                return 'normal';
        }
    }

    public function getMoodSmile() {
        switch($this->getMood()) {
            case -1:
                return ':(';
            case 1:
                return ':D';
            default:
                return ':)';
        }
    }

    public function setMoodName($moodName) {
        switch($moodName) {
            case 'bad':
                $this->setMood(-1);
                break;
            case 'good':
                $this->setMood(1);
                break;
            default:
                $this->setMood(0);
                break;
        }
    }

    public function addVote($user, $vote) {
        $postVote = new PostVote();
        $postVote->setPost($this);
        $postVote->setUser($user);
        $postVote->setPower($vote == 'plus' ? 1 : -1);
        $postVote->save();
    }

    public function isUserVoted($user) {
        $query = Doctrine_Query::create()
            ->select('v.id')
            ->from('PostVote v')
            ->where('v.user_id = ?', $user['id'])
            ->andWhere('v.post_id = ?', $this['id'])
            ->execute();
        return count($query) != 0;
    }

    public function getComments($page=1) {
        $query = Doctrine_Query::create()
            ->select('c.id')
            ->from('PostComment c')
            ->where('c.post_id = ?', $this['id'])
            ->andWhere('c.parent_id is null')
            ->orderBy('c.created_at');
        if($page !== 'count') {
        //$query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page'));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public function getAllComments($page=1) {
        $query = Doctrine_Query::create()
            ->select('c.id')
            ->from('PostComment c')
            ->where('c.post_id = ?', $this['id'])
            ->orderBy('c.created_at');
        if($page !== 'count') {
        //$query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page'));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public function getJsTime() {
        return number_format(strtotime($this->getCreatedAt())*1000, 0, '', '');
    }

    // *****Static Methods*****
    public static function getJoyPlot() {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 3600)
            ->select('avg(p.mood), date(p.created_at)')
            ->from('Post p')
            ->where('datediff(curdate(), date(p.created_at)) < 30')
            ->andWhere('p.type = ?', "post")
            ->orderBy('p.created_at')
            ->groupBy('date(p.created_at)')
            ->execute();
        $res = '[';
        foreach($query as $row) {
            $jstime = number_format(strtotime($row['date'])*1000, 0, '', '');
            $jsmood = $row['avg'];
            $res .= '['.$jstime.','.$jsmood.'],';
        }
        return $res.']';
    }

    public static function getLine($page=1) {
        $query = Doctrine_Query::create()
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->andWhere('p.rating  >= ?', sfConfig::get('app_post_mainpage_threshold'))
            ->orderBy('p.created_at desc');
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getBestLine($page=1) {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 1800)
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->andWhere('p.rating  >= ?', sfConfig::get('app_post_bestpage_threshold'))
            ->orderBy('p.created_at desc');
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getWorstLine($page=1) {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 1800)
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->andWhere('p.rating  < ?', sfConfig::get('app_post_worstpage_threshold'))
            ->orderBy('p.created_at desc');
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getMoodLine($mood=1, $page=1) {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 1800)
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->andWhere('p.mood  = ?', $mood)
            ->orderBy('p.created_at desc');
        if(sfContext::getInstance()->getUser()->isAnonymous())
            $query->addWhere('p.rating  >= ?', sfConfig::get('app_post_worstpage_threshold'));
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getRssLine($page=1) {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 1800)
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->andWhere('p.rating  >= ?', sfConfig::get('app_post_mainpage_threshold', 1))
            ->orderBy('p.created_at desc');
        if(sfContext::getInstance()->getUser()->isAnonymous())
            $query->addWhere('p.rating  >= ?', sfConfig::get('app_post_worstpage_threshold'));
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getNewLine($page=1) {
        $query = Doctrine_Query::create()
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->orderBy('p.created_at desc');
        if(sfContext::getInstance()->getUser()->isAnonymous())
            $query->addWhere('p.rating  >= ?', sfConfig::get('app_post_worstpage_threshold'));
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getTextLine($page=1) {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 3600)
            ->select('p.*')
            ->from('Post p')
	    ->leftJoin('p.Attributes a')
            ->where('(p.text != ? or a.comment is not null)', '')
            ->andWhere('p.type = ? or p.type = ?', array('post', 'seo-content'))
            ->orderBy('p.created_at desc');
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10) * 5);
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getDateLine($date, $page=1) {
        $query = Doctrine_Query::create()
            ->select('p.*')
            ->from('Post p, p.User u')
            ->where('date(p.created_at) = date(?)', $date)
            ->andWhere('u.is_active = ?', 1)
            ->andWhere('p.type = ?', "post")
            ->orderBy('p.created_at desc');
        if(sfContext::getInstance()->getUser()->isAnonymous())
            $query->addWhere('p.rating  >= ?', sfConfig::get('app_post_worstpage_threshold'));
        if($page !== 'count') {
            $query = new Doctrine_Pager($query,$page,sfConfig::get('app_posts_per_page', 10));
            return $query->execute();
        }
        else
            return $query->count();
    }

    public static function getTodayMood() {
        $query = Doctrine_Query::create()
            ->useResultCache(true, 1800)
            ->select('avg(p.mood)')
            ->from('Post p')
            ->where('date(p.created_at) = date(now())')
            ->andWhere('p.type = ?', "post")
            ->groupBy('date(p.created_at)')
            ->execute();
        sfApplicationConfiguration::getActive()->loadHelpers('I18N');
        if(count($query)) {
            $query = $query[0];
            if($query['avg'] >= 0.5)
                return __('отличное');
            elseif($query['avg'] >= 0.2 && $query['avg'] < 0.5)
                return __('хорошее');
            elseif($query['avg'] >= -0.2 && $query['avg'] < 0.2)
                return __('нормальное');
            elseif($query['avg'] >= -0.5 && $query['avg'] < -0.2)
                return __('так себе');
            elseif($query['avg'] < -0.5)
                return __('плохое');
        }
        else
            return __('нормальное');
    }
}
