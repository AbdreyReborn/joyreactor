<?php

/**
 * BasesfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property Doctrine_Collection $groups
 * @property Doctrine_Collection $permissions
 * @property Doctrine_Collection $sfGuardUserPermission
 * @property Doctrine_Collection $sfGuardUserGroup
 * @property sfGuardRememberKey $RememberKeys
 * @property sfGuardUserProfile $Profile
 * @property Doctrine_Collection $Cookies
 * @property Doctrine_Collection $PostComments
 * @property Doctrine_Collection $PostVotes
 * @property Doctrine_Collection $Friends
 * @property Doctrine_Collection $InFriends
 * @property Doctrine_Collection $Blogs
 * @property Doctrine_Collection $FavoritePosts
 * @property Doctrine_Collection $FavoriteBlogs
 * @property Doctrine_Collection $Posts
 * @property Doctrine_Collection $Messages
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
abstract class BasesfGuardUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('username', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => '128',
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => '128',
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => '128',
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => '128',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => '1',
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
        $this->option('type', 'MYISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        $this->hasMany('sfGuardGroup as groups', array(
             'refClass' => 'sfGuardUserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as permissions', array(
             'refClass' => 'sfGuardUserPermission',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasMany('sfGuardUserPermission', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardUserProfile as Profile', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Cookie as Cookies', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('PostComment as PostComments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('PostVote as PostVotes', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Friend as Friends', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Friend as InFriends', array(
             'local' => 'id',
             'foreign' => 'friend_id'));

        $this->hasMany('Blog as Blogs', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Favorite as FavoritePosts', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('FavoriteBlog as FavoriteBlogs', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Post as Posts', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Message as Messages', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}