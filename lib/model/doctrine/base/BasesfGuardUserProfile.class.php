<?php

/**
 * BasesfGuardUserProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $email
 * @property string $fullname
 * @property string $icq
 * @property string $jabber
 * @property boolean $commentsToJabber
 * @property boolean $commentsToIcq
 * @property boolean $commentsToMail
 * @property boolean $collectJabberStatus
 * @property boolean $collectIcqStatus
 * @property boolean $useCrossposting
 * @property boolean $notifyFriendline
 * @property string $ljlogin
 * @property string $ljpassword
 * @property string $avatar
 * @property string $about
 * @property float $rating
 * @property string $validate
 * @property boolean $isNew
 * @property sfGuardUser $User
 * 
 * @method integer            getId()                  Returns the current record's "id" value
 * @method integer            getUserId()              Returns the current record's "user_id" value
 * @method string             getEmail()               Returns the current record's "email" value
 * @method string             getFullname()            Returns the current record's "fullname" value
 * @method string             getIcq()                 Returns the current record's "icq" value
 * @method string             getJabber()              Returns the current record's "jabber" value
 * @method boolean            getCommentsToJabber()    Returns the current record's "commentsToJabber" value
 * @method boolean            getCommentsToIcq()       Returns the current record's "commentsToIcq" value
 * @method boolean            getCommentsToMail()      Returns the current record's "commentsToMail" value
 * @method boolean            getCollectJabberStatus() Returns the current record's "collectJabberStatus" value
 * @method boolean            getCollectIcqStatus()    Returns the current record's "collectIcqStatus" value
 * @method boolean            getUseCrossposting()     Returns the current record's "useCrossposting" value
 * @method boolean            getNotifyFriendline()    Returns the current record's "notifyFriendline" value
 * @method string             getLjlogin()             Returns the current record's "ljlogin" value
 * @method string             getLjpassword()          Returns the current record's "ljpassword" value
 * @method string             getAvatar()              Returns the current record's "avatar" value
 * @method string             getAbout()               Returns the current record's "about" value
 * @method float              getRating()              Returns the current record's "rating" value
 * @method string             getValidate()            Returns the current record's "validate" value
 * @method boolean            getIsNew()               Returns the current record's "isNew" value
 * @method sfGuardUser        getUser()                Returns the current record's "User" value
 * @method sfGuardUserProfile setId()                  Sets the current record's "id" value
 * @method sfGuardUserProfile setUserId()              Sets the current record's "user_id" value
 * @method sfGuardUserProfile setEmail()               Sets the current record's "email" value
 * @method sfGuardUserProfile setFullname()            Sets the current record's "fullname" value
 * @method sfGuardUserProfile setIcq()                 Sets the current record's "icq" value
 * @method sfGuardUserProfile setJabber()              Sets the current record's "jabber" value
 * @method sfGuardUserProfile setCommentsToJabber()    Sets the current record's "commentsToJabber" value
 * @method sfGuardUserProfile setCommentsToIcq()       Sets the current record's "commentsToIcq" value
 * @method sfGuardUserProfile setCommentsToMail()      Sets the current record's "commentsToMail" value
 * @method sfGuardUserProfile setCollectJabberStatus() Sets the current record's "collectJabberStatus" value
 * @method sfGuardUserProfile setCollectIcqStatus()    Sets the current record's "collectIcqStatus" value
 * @method sfGuardUserProfile setUseCrossposting()     Sets the current record's "useCrossposting" value
 * @method sfGuardUserProfile setNotifyFriendline()    Sets the current record's "notifyFriendline" value
 * @method sfGuardUserProfile setLjlogin()             Sets the current record's "ljlogin" value
 * @method sfGuardUserProfile setLjpassword()          Sets the current record's "ljpassword" value
 * @method sfGuardUserProfile setAvatar()              Sets the current record's "avatar" value
 * @method sfGuardUserProfile setAbout()               Sets the current record's "about" value
 * @method sfGuardUserProfile setRating()              Sets the current record's "rating" value
 * @method sfGuardUserProfile setValidate()            Sets the current record's "validate" value
 * @method sfGuardUserProfile setIsNew()               Sets the current record's "isNew" value
 * @method sfGuardUserProfile setUser()                Sets the current record's "User" value
 * 
 * @package    Empaty
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfGuardUserProfile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user_profile');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             ));
        $this->hasColumn('fullname', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             ));
        $this->hasColumn('icq', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             ));
        $this->hasColumn('jabber', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             ));
        $this->hasColumn('commentsToJabber', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('commentsToIcq', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('commentsToMail', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('collectJabberStatus', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('collectIcqStatus', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('useCrossposting', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('notifyFriendline', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('ljlogin', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('ljpassword', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('avatar', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('about', 'string', 65536, array(
             'type' => 'string',
             'length' => 65536,
             ));
        $this->hasColumn('rating', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('validate', 'string', 17, array(
             'type' => 'string',
             'length' => 17,
             ));
        $this->hasColumn('isNew', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));


        $this->index('user_id', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             'type' => NULL,
             ));
        $this->index('email', array(
             'fields' => 
             array(
              0 => 'email',
             ),
             'type' => NULL,
             ));
        $this->index('fullname', array(
             'fields' => 
             array(
              0 => 'fullname',
             ),
             'type' => NULL,
             ));
        $this->index('icq', array(
             'fields' => 
             array(
              0 => 'icq',
             ),
             'type' => NULL,
             ));
        $this->index('jabber', array(
             'fields' => 
             array(
              0 => 'jabber',
             ),
             'type' => NULL,
             ));
        $this->index('rating', array(
             'fields' => 
             array(
              0 => 'rating',
             ),
             'type' => NULL,
             ));
        $this->index('isNew', array(
             'fields' => 
             array(
              0 => 'isNew',
             ),
             'type' => NULL,
             ));
        $this->index('created_at', array(
             'fields' => 
             array(
              0 => 'created_at',
             ),
             'type' => NULL,
             ));
        $this->index('updated_at', array(
             'fields' => 
             array(
              0 => 'updated_at',
             ),
             'type' => NULL,
             ));
        $this->option('type', 'MYISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}