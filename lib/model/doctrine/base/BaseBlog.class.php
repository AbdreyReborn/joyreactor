<?php

/**
 * BaseBlog
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $name
 * @property string $tag
 * @property integer $rating
 * @property integer $best
 * @property integer $count
 * @property string $description
 * @property string $synonyms
 * @property string $avatar
 * @property sfGuardUser $User
 * @property Doctrine_Collection $BlogPosts
 * @property Doctrine_Collection $InFavorite
 * @property Doctrine_Collection $Posts
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getTag()         Returns the current record's "tag" value
 * @method integer             getRating()      Returns the current record's "rating" value
 * @method integer             getBest()        Returns the current record's "best" value
 * @method integer             getCount()       Returns the current record's "count" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method string              getSynonyms()    Returns the current record's "synonyms" value
 * @method string              getAvatar()      Returns the current record's "avatar" value
 * @method sfGuardUser         getUser()        Returns the current record's "User" value
 * @method Doctrine_Collection getBlogPosts()   Returns the current record's "BlogPosts" collection
 * @method Doctrine_Collection getInFavorite()  Returns the current record's "InFavorite" collection
 * @method Doctrine_Collection getPosts()       Returns the current record's "Posts" collection
 * @method Blog                setId()          Sets the current record's "id" value
 * @method Blog                setUserId()      Sets the current record's "user_id" value
 * @method Blog                setName()        Sets the current record's "name" value
 * @method Blog                setTag()         Sets the current record's "tag" value
 * @method Blog                setRating()      Sets the current record's "rating" value
 * @method Blog                setBest()        Sets the current record's "best" value
 * @method Blog                setCount()       Sets the current record's "count" value
 * @method Blog                setDescription() Sets the current record's "description" value
 * @method Blog                setSynonyms()    Sets the current record's "synonyms" value
 * @method Blog                setAvatar()      Sets the current record's "avatar" value
 * @method Blog                setUser()        Sets the current record's "User" value
 * @method Blog                setBlogPosts()   Sets the current record's "BlogPosts" collection
 * @method Blog                setInFavorite()  Sets the current record's "InFavorite" collection
 * @method Blog                setPosts()       Sets the current record's "Posts" collection
 * 
 * @package    Empaty
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBlog extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('blog');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('tag', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'dev',
             'length' => 255,
             ));
        $this->hasColumn('rating', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('best', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('count', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('description', 'string', 4096, array(
             'type' => 'string',
             'length' => 4096,
             ));
        $this->hasColumn('synonyms', 'string', 4096, array(
             'type' => 'string',
             'length' => 4096,
             ));
        $this->hasColumn('avatar', 'string', 4096, array(
             'type' => 'string',
             'length' => 4096,
             ));


        $this->index('user_id', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             'type' => NULL,
             ));
        $this->index('name', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'type' => NULL,
             ));
        $this->index('rating', array(
             'fields' => 
             array(
              0 => 'rating',
             ),
             'type' => NULL,
             ));
        $this->index('created_at', array(
             'fields' => 
             array(
              0 => 'created_at',
             ),
             'type' => NULL,
             ));
        $this->index('updated_at', array(
             'fields' => 
             array(
              0 => 'updated_at',
             ),
             'type' => NULL,
             ));
        $this->index('best', array(
             'fields' => 
             array(
              0 => 'best',
              1 => 'count',
             ),
             ));
        $this->index('count', array(
             'fields' => 
             array(
              0 => 'count',
             ),
             ));
        $this->option('type', 'MYISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasMany('BlogPost as BlogPosts', array(
             'local' => 'id',
             'foreign' => 'blog_id'));

        $this->hasMany('FavoriteBlog as InFavorite', array(
             'local' => 'id',
             'foreign' => 'Blog_id'));

        $this->hasMany('Post as Posts', array(
             'refClass' => 'BlogPost',
             'local' => 'blog_id',
             'foreign' => 'post_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}