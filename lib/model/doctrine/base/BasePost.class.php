<?php

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $text
 * @property float $rating
 * @property integer $comments_count
 * @property float $mood
 * @property string $type
 * @property boolean $isNew
 * @property boolean $lj
 * @property sfGuardUser $User
 * @property Doctrine_Collection $Blogs
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Votes
 * @property Doctrine_Collection $Attributes
 * @property Doctrine_Collection $Attachments
 * @property Doctrine_Collection $BlogPosts
 * @property Doctrine_Collection $InFavorite
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
abstract class BasePost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('text', 'string', 2147483647, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '2147483647',
             ));
        $this->hasColumn('rating', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('comments_count', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('mood', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'default' => 'post',
             'length' => '255',
             ));
        $this->hasColumn('isNew', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('lj', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));


        $this->index('user_id', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             'type' => NULL,
             ));
        $this->index('rating', array(
             'fields' => 
             array(
              0 => 'rating',
             ),
             'type' => NULL,
             ));
        $this->index('comments_count', array(
             'fields' => 
             array(
              0 => 'comments_count',
             ),
             'type' => NULL,
             ));
        $this->index('mood', array(
             'fields' => 
             array(
              0 => 'mood',
             ),
             'type' => NULL,
             ));
        $this->index('type', array(
             'fields' => 
             array(
              0 => 'type',
             ),
             'type' => NULL,
             ));
        $this->index('isNew', array(
             'fields' => 
             array(
              0 => 'isNew',
             ),
             'type' => NULL,
             ));
        $this->index('created_at', array(
             'fields' => 
             array(
              0 => 'created_at',
             ),
             'type' => NULL,
             ));
        $this->index('updated_at', array(
             'fields' => 
             array(
              0 => 'updated_at',
             ),
             'type' => NULL,
             ));
        $this->option('type', 'MYISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Blog as Blogs', array(
             'refClass' => 'BlogPost',
             'local' => 'post_id',
             'foreign' => 'blog_id'));

        $this->hasMany('PostComment as Comments', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('PostVote as Votes', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('PostAttribute as Attributes', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('MessageAttachment as Attachments', array(
             'local' => 'id',
             'foreign' => 'message_id'));

        $this->hasMany('BlogPost as BlogPosts', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('Favorite as InFavorite', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}