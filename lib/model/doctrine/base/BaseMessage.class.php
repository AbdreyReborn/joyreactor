<?php

/**
 * BaseMessage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property integer $object_id
 * @property string $direction
 * @property string $type
 * @property string $protocol
 * @property string $status
 * @property string $text
 * @property sfGuardUser $User
 * 
 * @method integer     getId()        Returns the current record's "id" value
 * @method integer     getUserId()    Returns the current record's "user_id" value
 * @method integer     getObjectId()  Returns the current record's "object_id" value
 * @method string      getDirection() Returns the current record's "direction" value
 * @method string      getType()      Returns the current record's "type" value
 * @method string      getProtocol()  Returns the current record's "protocol" value
 * @method string      getStatus()    Returns the current record's "status" value
 * @method string      getText()      Returns the current record's "text" value
 * @method sfGuardUser getUser()      Returns the current record's "User" value
 * @method Message     setId()        Sets the current record's "id" value
 * @method Message     setUserId()    Sets the current record's "user_id" value
 * @method Message     setObjectId()  Sets the current record's "object_id" value
 * @method Message     setDirection() Sets the current record's "direction" value
 * @method Message     setType()      Sets the current record's "type" value
 * @method Message     setProtocol()  Sets the current record's "protocol" value
 * @method Message     setStatus()    Sets the current record's "status" value
 * @method Message     setText()      Sets the current record's "text" value
 * @method Message     setUser()      Sets the current record's "User" value
 * 
 * @package    Empaty
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMessage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('message');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('object_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('direction', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('protocol', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('status', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'not sent',
             'length' => 255,
             ));
        $this->hasColumn('text', 'string', 2147483647, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 2147483647,
             ));


        $this->index('user_id', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             'type' => NULL,
             ));
        $this->index('object_id', array(
             'fields' => 
             array(
              0 => 'object_id',
             ),
             'type' => NULL,
             ));
        $this->index('direction', array(
             'fields' => 
             array(
              0 => 'direction',
             ),
             'type' => NULL,
             ));
        $this->index('type', array(
             'fields' => 
             array(
              0 => 'type',
             ),
             'type' => NULL,
             ));
        $this->index('protocol', array(
             'fields' => 
             array(
              0 => 'protocol',
             ),
             'type' => NULL,
             ));
        $this->index('status', array(
             'fields' => 
             array(
              0 => 'status',
             ),
             'type' => NULL,
             ));
        $this->index('created_at', array(
             'fields' => 
             array(
              0 => 'created_at',
             ),
             'type' => NULL,
             ));
        $this->index('updated_at', array(
             'fields' => 
             array(
              0 => 'updated_at',
             ),
             'type' => NULL,
             ));
        $this->option('type', 'MYISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}